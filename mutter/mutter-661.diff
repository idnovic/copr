diff --git a/clutter/clutter/clutter-master-clock-default.c b/clutter/clutter/clutter-master-clock-default.c
index 3197a32e3e4d1606847933c6229c88f2c414bee0..bdf53ac1a58b6e3619dc6f680debf93b6d5e23d2 100644
--- a/clutter/clutter/clutter-master-clock-default.c
+++ b/clutter/clutter/clutter-master-clock-default.c
@@ -274,27 +274,6 @@ master_clock_next_frame_delay (ClutterMasterClockDefault *master_clock)
   return master_clock_get_swap_wait_time (master_clock);
 }
 
-static void
-master_clock_process_events (ClutterMasterClockDefault *master_clock,
-                             GSList                    *stages)
-{
-  GSList *l;
-#ifdef CLUTTER_ENABLE_DEBUG
-  gint64 start = g_get_monotonic_time ();
-#endif
-
-  /* Process queued events */
-  for (l = stages; l != NULL; l = l->next)
-    _clutter_stage_process_queued_events (l->data);
-
-#ifdef CLUTTER_ENABLE_DEBUG
-  if (_clutter_diagnostic_enabled ())
-    clutter_warn_if_over_budget (master_clock, start, "Event processing");
-
-  master_clock->remaining_budget -= (g_get_monotonic_time () - start);
-#endif
-}
-
 /*
  * master_clock_advance_timelines:
  * @master_clock: a #ClutterMasterClock
@@ -478,9 +457,10 @@ clutter_clock_dispatch (GSource     *source,
 
   /* 1. process all the events; each stage goes through its events queue
    *    and processes each event according to its type, then emits the
-   *    various signals that are associated with the event
+   *    various signals that are associated with the event. This happens
+   *    in advance in ClutterStage so that clients might be able to render
+   *    a new frame before we get here and composite them.
    */
-  master_clock_process_events (master_clock, stages);
 
   /* 2. advance the timelines */
   master_clock_advance_timelines (master_clock);
diff --git a/clutter/clutter/clutter-stage-window.c b/clutter/clutter/clutter-stage-window.c
index 76421d6a0ceca3b40ee45b0acde55eba7cfab99b..f81bee302a7ce531975ebb97e2228b62ae8a535d 100644
--- a/clutter/clutter/clutter-stage-window.c
+++ b/clutter/clutter/clutter-stage-window.c
@@ -112,6 +112,12 @@ _clutter_stage_window_get_geometry (ClutterStageWindow    *window,
   CLUTTER_STAGE_WINDOW_GET_IFACE (window)->get_geometry (window, geometry);
 }
 
+int64_t
+_clutter_stage_window_get_refresh_interval (ClutterStageWindow *window)
+{
+  return CLUTTER_STAGE_WINDOW_GET_IFACE (window)->get_refresh_interval (window);
+}
+
 void
 _clutter_stage_window_schedule_update  (ClutterStageWindow *window,
                                         int                 sync_delay)
diff --git a/clutter/clutter/clutter-stage-window.h b/clutter/clutter/clutter-stage-window.h
index 389ed0596a650b5f2ab9ce39aecbe376b6b00a35..54bd91e4524cef5b261389c45b6184b2e1394896 100644
--- a/clutter/clutter/clutter-stage-window.h
+++ b/clutter/clutter/clutter-stage-window.h
@@ -46,6 +46,8 @@ struct _ClutterStageWindowInterface
   void              (* get_geometry)            (ClutterStageWindow *stage_window,
                                                  cairo_rectangle_int_t *geometry);
 
+  int64_t           (* get_refresh_interval)    (ClutterStageWindow *stage_window);
+
   void              (* schedule_update)         (ClutterStageWindow *stage_window,
                                                  int                 sync_delay);
   gint64            (* get_update_time)         (ClutterStageWindow *stage_window);
@@ -94,6 +96,7 @@ void              _clutter_stage_window_resize                  (ClutterStageWin
                                                                  gint                height);
 void              _clutter_stage_window_get_geometry            (ClutterStageWindow *window,
                                                                  cairo_rectangle_int_t *geometry);
+int64_t           _clutter_stage_window_get_refresh_interval    (ClutterStageWindow *window);
 void              _clutter_stage_window_schedule_update         (ClutterStageWindow *window,
                                                                  int                 sync_delay);
 gint64            _clutter_stage_window_get_update_time         (ClutterStageWindow *window);
diff --git a/clutter/clutter/clutter-stage.c b/clutter/clutter/clutter-stage.c
index c95c47327ab5a5ec4320f6ab4d8895da12d41523..1d15d3098c188c48d0156266770af349df6d36b6 100644
--- a/clutter/clutter/clutter-stage.c
+++ b/clutter/clutter/clutter-stage.c
@@ -122,6 +122,8 @@ struct _ClutterStagePrivate
   ClutterActor *key_focused_actor;
 
   GQueue *event_queue;
+  guint event_timeout_source;
+  int64_t last_event_timeout_time;
 
   ClutterStageHint stage_hints;
 
@@ -854,33 +856,51 @@ clutter_stage_real_deactivate (ClutterStage *stage)
   clutter_stage_emit_key_focus_event (stage, FALSE);
 }
 
+static int64_t
+_clutter_stage_get_refresh_interval (ClutterStage *stage)
+{
+  ClutterStageWindow *stage_window;
+
+  if (CLUTTER_ACTOR_IN_DESTRUCTION (stage))
+    return 0;
+
+  stage_window = _clutter_stage_get_window (stage);
+  if (stage_window == NULL)
+    return 0;
+
+  return _clutter_stage_window_get_refresh_interval (stage_window);
+}
+
+static gboolean
+_clutter_stage_flush_events (gpointer user_data)
+{
+  ClutterStage *stage = CLUTTER_STAGE (user_data);
+  ClutterStagePrivate *priv = stage->priv;
+
+  priv->event_timeout_source = 0;
+  priv->last_event_timeout_time = g_get_monotonic_time ();
+  _clutter_stage_process_queued_events (stage);
+
+  return G_SOURCE_REMOVE;
+}
+
 void
 _clutter_stage_queue_event (ClutterStage *stage,
                             ClutterEvent *event,
                             gboolean      copy_event)
 {
   ClutterStagePrivate *priv;
-  gboolean first_event;
   ClutterInputDevice *device;
 
   g_return_if_fail (CLUTTER_IS_STAGE (stage));
 
   priv = stage->priv;
 
-  first_event = priv->event_queue->length == 0;
-
   if (copy_event)
     event = clutter_event_copy (event);
 
   g_queue_push_tail (priv->event_queue, event);
 
-  if (first_event)
-    {
-      ClutterMasterClock *master_clock = _clutter_master_clock_get_default ();
-      _clutter_master_clock_start_running (master_clock);
-      _clutter_stage_schedule_update (stage);
-    }
-
   /* if needed, update the state of the input device of the event.
    * we do it here to avoid calling the same code from every backend
    * event processing function
@@ -901,6 +921,21 @@ _clutter_stage_queue_event (ClutterStage *stage,
       _clutter_input_device_set_state (device, event_state);
       _clutter_input_device_set_time (device, event_time);
     }
+
+  if (!priv->event_timeout_source)
+    {
+      int64_t now = g_get_monotonic_time ();
+      int64_t refresh_interval = _clutter_stage_get_refresh_interval (stage);
+      int64_t flush_time = priv->last_event_timeout_time + refresh_interval;
+      guint timeout_ms = (flush_time > now) ? (flush_time - now) / 1000 : 0;
+
+      priv->event_timeout_source =
+        g_timeout_add_full (CLUTTER_PRIORITY_REDRAW - 1,
+                            timeout_ms,
+                            _clutter_stage_flush_events,
+                            stage,
+                            NULL);
+    }
 }
 
 gboolean
@@ -1844,6 +1879,9 @@ clutter_stage_finalize (GObject *object)
   ClutterStage *stage = CLUTTER_STAGE (object);
   ClutterStagePrivate *priv = stage->priv;
 
+  if (priv->event_timeout_source)
+    g_source_remove (priv->event_timeout_source);
+
   g_queue_foreach (priv->event_queue, (GFunc) clutter_event_free, NULL);
   g_queue_free (priv->event_queue);
 
diff --git a/clutter/clutter/cogl/clutter-stage-cogl.c b/clutter/clutter/cogl/clutter-stage-cogl.c
index 8f97a5fa6f41cb1a870a5d3c32e27bcd3523f248..914a8852d9c15be8ae0115b942d764cd28ae5af8 100644
--- a/clutter/clutter/cogl/clutter-stage-cogl.c
+++ b/clutter/clutter/cogl/clutter-stage-cogl.c
@@ -161,14 +161,34 @@ clutter_stage_cogl_realize (ClutterStageWindow *stage_window)
   return TRUE;
 }
 
+static float
+clutter_stage_cogl_get_refresh_rate (ClutterStageWindow *stage_window)
+{
+  ClutterStageCogl *stage_cogl = CLUTTER_STAGE_COGL (stage_window);
+  float refresh_rate;
+
+  refresh_rate = stage_cogl->refresh_rate;
+  if (refresh_rate <= 0.0)
+    refresh_rate = clutter_get_default_frame_rate ();
+
+  return refresh_rate;
+}
+
+static int64_t
+clutter_stage_cogl_get_refresh_interval (ClutterStageWindow *stage_window)
+{
+  float refresh_rate = clutter_stage_cogl_get_refresh_rate (stage_window);
+
+  return (int64_t) (0.5 + G_USEC_PER_SEC / refresh_rate);
+}
+
 static void
 clutter_stage_cogl_schedule_update (ClutterStageWindow *stage_window,
                                     gint                sync_delay)
 {
   ClutterStageCogl *stage_cogl = CLUTTER_STAGE_COGL (stage_window);
   gint64 now;
-  float refresh_rate;
-  gint64 refresh_interval;
+  int64_t refresh_interval;
   int64_t min_render_time_allowed;
   int64_t max_render_time_allowed;
   int64_t next_presentation_time;
@@ -186,11 +206,8 @@ clutter_stage_cogl_schedule_update (ClutterStageWindow *stage_window,
       return;
     }
 
-  refresh_rate = stage_cogl->refresh_rate;
-  if (refresh_rate <= 0.0)
-    refresh_rate = clutter_get_default_frame_rate ();
+  refresh_interval = clutter_stage_cogl_get_refresh_interval (stage_window);
 
-  refresh_interval = (gint64) (0.5 + G_USEC_PER_SEC / refresh_rate);
   if (refresh_interval == 0)
     {
       stage_cogl->update_time = now;
@@ -205,7 +222,7 @@ clutter_stage_cogl_schedule_update (ClutterStageWindow *stage_window,
     {
       g_warning ("Unsupported monitor refresh rate detected. "
                  "(Refresh rate: %.3f, refresh interval: %ld)",
-                 refresh_rate,
+                 clutter_stage_cogl_get_refresh_rate (stage_window),
                  refresh_interval);
       stage_cogl->update_time = now;
       return;
@@ -1062,6 +1079,7 @@ clutter_stage_window_iface_init (ClutterStageWindowInterface *iface)
   iface->resize = clutter_stage_cogl_resize;
   iface->show = clutter_stage_cogl_show;
   iface->hide = clutter_stage_cogl_hide;
+  iface->get_refresh_interval = clutter_stage_cogl_get_refresh_interval;
   iface->schedule_update = clutter_stage_cogl_schedule_update;
   iface->get_update_time = clutter_stage_cogl_get_update_time;
   iface->clear_update_time = clutter_stage_cogl_clear_update_time;
